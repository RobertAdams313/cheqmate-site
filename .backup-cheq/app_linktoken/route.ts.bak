import { NextRequest, NextResponse } from "next/server";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

type Flow = "add" | "update";

function plaidBaseUrl(env: string): string {
  const e = (env || "").toLowerCase();
  if (e === "production") return "https://production.plaid.com";
  if (e === "development") return "https://development.plaid.com";
  return "https://sandbox.plaid.com";
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json().catch(() => ({}));
    const flow: Flow = body?.flow === "update" ? "update" : "add";
    const accessToken: string | undefined = body?.access_token;

    const env = (process.env.PLAID_ENV || "sandbox").toLowerCase();
    const baseUrl = plaidBaseUrl(env);

    const CLIENT_ID =
      env === "sandbox"
        ? (process.env.PLAID_CLIENT_ID_SANDBOX || process.env.PLAID_CLIENT_ID)
        : (process.env.PLAID_CLIENT_ID_PROD || process.env.PLAID_CLIENT_ID);

    const SECRET =
      env === "sandbox"
        ? (process.env.PLAID_SECRET_SANDBOX || process.env.PLAID_SECRET)
        : (process.env.PLAID_SECRET_PROD || process.env.PLAID_SECRET);

    if (!CLIENT_ID || !SECRET) {
      return NextResponse.json(
        { ok: false, error: "Missing PLAID_CLIENT_ID / PLAID_SECRET" },
        { status: 500 }
      );
    }

    const REDIRECT =
      env === "sandbox"
        ? (process.env.PLAID_REDIRECT_URI_SANDBOX || process.env.PLAID_REDIRECT_URI)
        : (process.env.PLAID_REDIRECT_URI_PROD || process.env.PLAID_REDIRECT_URI);
    const WEBHOOK = process.env.PLAID_WEBHOOK_URL;

    const client_user_id =
      process.env.PLAID_CLIENT_USER_ID || \`cheqmate-\${env}-\${Date.now()}\`;

    const common: Record<string, unknown> = {
      client_id: CLIENT_ID,
      secret: SECRET,
      user: { client_user_id },
      products: ["transactions"],
      language: "en",
      country_codes: ["US"],
      ...(REDIRECT ? { redirect_uri: REDIRECT } : {}),
      ...(WEBHOOK ? { webhook: WEBHOOK } : {}),
    };

    const createBody =
      flow === "update"
        ? (() => {
            if (!accessToken) return { __error: "Update mode requires 'access_token'." };
            return { ...common, access_token: accessToken };
          })()
        : common;

    if ((createBody as any).__error) {
      return NextResponse.json(
        { ok: false, error: (createBody as any).__error },
        { status: 400 }
      );
    }

    const r = await fetch(\`\${baseUrl}/link/token/create\`, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(createBody),
    });

    const json = await r.json().catch(() => ({}));
    if (!r.ok) {
      return NextResponse.json(
        { ok: false, status: r.status, plaid: json },
        { status: r.status }
      );
    }

    return NextResponse.json({ ok: true, link_token: json.link_token, env, flow });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e?.message || "unknown" }, { status: 500 });
  }
}

export function GET() {
  return NextResponse.json({ error: "Use POST" }, { status: 405 });
}
